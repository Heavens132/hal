name: Release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  release-doc:
    name: release-doc

    strategy:
      matrix:
        #        runs-on: [ubuntu-latest, macOS-latest]
        runs-on: [ubuntu-latest]
      fail-fast: false

    runs-on: ${{ matrix.runs-on }}
    
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*
      - run: |
          git fetch --prune --unshallow

      - name: Cache pip Linux
        uses: actions/cache@v1
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache pip macOS
        uses: actions/cache@v1
        if: startsWith(runner.os, 'macOS')
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: ./install_dependencies.sh

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Cache CCache
        uses: actions/cache@v1
        with:
          path: ~/.ccache
          #        key: ${{ runner.OS }}-build-ccache-${{ hashFiles('**/package-lock.json') }}
          key: ${{ runner.OS }}-build-ccache
          restore-keys: |
            ${{ runner.OS }}-build-ccache-${{ env.cache-name }}-
            ${{ runner.OS }}-build-ccache-

      - name: Configure CMake
        if: startsWith(runner.os, 'Linux')
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          $GITHUB_WORKSPACE/tools/genversion.py $GITHUB_WORKSPACE
          cmake -G Ninja $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_ALL_PLUGINS=ON -DBUILD_TESTS=ON -DBUILD_COVERAGE=ON -DWITH_GUI=ON -DBUILD_DOCUMENTATION=ON -DPACKAGE_DEB=OFF -DCMAKE_INSTALL_PREFIX=/usr/
        env:
          HAL_BASE_PATH: ${{runner.workspace}}/build

      - name: Build Doxygen
        if: startsWith(runner.os, 'Linux')
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build . --target doc --clean-first --config $BUILD_TYPE
        env:
          HAL_BASE_PATH: ${{runner.workspace}}/build

      - name: Build Sphinx
        if: startsWith(runner.os, 'Linux')
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build . --target hal_py_docs --clean-first --config $BUILD_TYPE
        env:
          HAL_BASE_PATH: ${{runner.workspace}}/build


      - name: Deploy Sphinx
        uses: peaceiris/actions-gh-pages@v3
        with:
          external_repository: emsec/hal-pydoc
          deploy_key: ${{ secrets.GH_PAGES_PY_KEY }}
          publish_dir: ${{runner.workspace}}/build/python-doc
          publish_branch: master  # deploying branch
          enable_jekyll: false
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          force_orphan: true


      - name: Deploy Doxygen
        uses: peaceiris/actions-gh-pages@v3
        with:
          external_repository: emsec/hal-doc
          deploy_key: ${{ secrets.GH_PAGES_KEY }}
          publish_dir: ${{runner.workspace}}/build/documentation/documentation
          publish_branch: master  # deploying branch
          enable_jekyll: false
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          force_orphan: true


