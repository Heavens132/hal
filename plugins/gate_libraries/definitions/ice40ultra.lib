library (ICE40ULTRA) {
    type (bus11) {
        base_type : array;
        data_type : bit;
        bit_width : 11;
        bit_from  : 0;
        bit_to    : 10;
    }
    type (bus16) {
        base_type : array;
        data_type : bit;
        bit_width : 16;
        bit_from  : 0;
        bit_to    : 15;
    }
    type (bus32) {
        base_type : array;
        data_type : bit;
        bit_width : 32;
        bit_from  : 0;
        bit_to    : 31;
    }
    cell(SB_CARRY) {
        pin(CI) {
            direction: input;
        }
        pin(I0) {
            direction: input;
        }
        pin(I1) {
            direction: input;
        }
        pin(CO) {
            direction: output;
            function: "(I0 & I1) | ((I0 | I1) & CI)";
        }
    }

    cell(SB_DFF) {
        ff ("IQ" , "IQN") {
            next_state          : "D";
            clocked_on          : "C";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFE) {
        ff ("IQ" , "IQN") {
            next_state          : "D";
            clocked_on          : "(E & C)";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(E) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFSR) {
        ff ("IQ" , "IQN") {
            next_state          : "D & !R";
            clocked_on          : "C";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(R) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFR) {
        ff ("IQ" , "IQN") {
            next_state          : "D & !R";
            clocked_on          : "C";
            preset              : "R";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(R) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFSS) {
        ff ("IQ" , "IQN") {
            next_state          : "D | S";
            clocked_on          : "C";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(S) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFS) {
        ff ("IQ" , "IQN") {
            next_state          : "D | S";
            clocked_on          : "C";
            clear               : "S";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(S) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFESR) {
        ff ("IQ" , "IQN") {
            next_state          : "D & !R";
            clocked_on          : "(E & C)";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(R) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFER) {
        ff ("IQ" , "IQN") {
            next_state          : "D & !R";
            clocked_on          : "(E & C)";
            preset              : "R";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(R) {
            direction: input;
        }
        pin(E) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFESS) {
        ff ("IQ" , "IQN") {
            next_state          : "D | S";
            clocked_on          : "(E & C)";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(S) {
            direction: input;
        }
        pin(E) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFES) {
        ff ("IQ" , "IQN") {
            next_state          : "D | S";
            clocked_on          : "(E & C)";
            clear               : "S";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(S) {
            direction: input;
        }
        pin(E) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFN) {
        ff ("IQ" , "IQN") {
            next_state          : "D";
            clocked_on          : "!C";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFNE) {
        ff ("IQ" , "IQN") {
            next_state          : "D";
            clocked_on          : "(E & !C)";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(E) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFNSR) {
        ff ("IQ" , "IQN") {
            next_state          : "D & !R";
            clocked_on          : "!C";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(R) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFNR) {
        ff ("IQ" , "IQN") {
            next_state          : "D & !R";
            clocked_on          : "!C";
            preset              : "R";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(R) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFNSS) {
        ff ("IQ" , "IQN") {
            next_state          : "D | S";
            clocked_on          : "!C";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(S) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFNS) {
        ff ("IQ" , "IQN") {
            next_state          : "D | S";
            clocked_on          : "!C";
            clear               : "S";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(S) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFNESR) {
        ff ("IQ" , "IQN") {
            next_state          : "D & !R";
            clocked_on          : "(E & !C)";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(R) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFNER) {
        ff ("IQ" , "IQN") {
            next_state          : "D & !R";
            clocked_on          : "(E & !C)";
            preset              : "R";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(R) {
            direction: input;
        }
        pin(E) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFNESS) {
        ff ("IQ" , "IQN") {
            next_state          : "D | S";
            clocked_on          : "(E & !C)";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(S) {
            direction: input;
        }
        pin(E) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_DFFNES) {
        ff ("IQ" , "IQN") {
            next_state          : "D | S";
            clocked_on          : "(E & !C)";
            clear               : "S";
            data_category       : "generic";
            data_key            : "INIT";
        }
        pin(C) {
            direction: input;
            clock: true;
        }
        pin(S) {
            direction: input;
        }
        pin(E) {
            direction: input;
        }
        pin(D) {
            direction: input;
        }
        pin(Q) {
            direction: output;
            function: "IQ";
        }
    }

    cell(SB_LUT4) {
        lut ("lut_out") {
            data_category     : "generic";
            data_identifier   : "INIT";
            bit_order         : "ascending";
        }
        pin(I0) {
            direction: input;
        }
        pin(I1) {
            direction: input;
        }
        pin(I2) {
            direction: input;
        }
        pin(I3) {
            direction: input;
        }
        pin(O) {
            direction: output;
            function: "lut_out";
        }
    }

    cell(SB_RAM40_4K) {
        pin(WE) { direction: input; }
        pin(WCLK) { direction: input; }
        pin(WCLKE) { direction: input; }
        pin(RE) { direction: input; }
        pin(RCLKE) { direction: input; }
        pin(RCLK) { direction: input; }
        bus(WADDR){
            bus_type: bus11;
            direction: input;
            pin(WADDR[0]) {  }
            pin(WADDR[1]) {  }
            pin(WADDR[2]) {  }
            pin(WADDR[3]) {  }
            pin(WADDR[4]) {  }
            pin(WADDR[5]) {  }
            pin(WADDR[6]) {  }
            pin(WADDR[7]) {  }
            pin(WADDR[8]) {  }
            pin(WADDR[9]) {  }
            pin(WADDR[10]) {  }
        }
        bus(RADDR){
            bus_type: bus11;
            direction: input;
            pin(RADDR[0]) {  }
            pin(RADDR[1]) {  }
            pin(RADDR[2]) {  }
            pin(RADDR[3]) {  }
            pin(RADDR[4]) {  }
            pin(RADDR[5]) {  }
            pin(RADDR[6]) {  }
            pin(RADDR[7]) {  }
            pin(RADDR[8]) {  }
            pin(RADDR[9]) {  }
            pin(RADDR[10]) {  }
        }
        bus(MASK){
            bus_type: bus16;
            direction: input;
            pin(MASK[0]) {  }
            pin(MASK[1]) {  }
            pin(MASK[2]) {  }
            pin(MASK[3]) {  }
            pin(MASK[4]) {  }
            pin(MASK[5]) {  }
            pin(MASK[6]) {  }
            pin(MASK[7]) {  }
            pin(MASK[8]) {  }
            pin(MASK[9]) {  }
            pin(MASK[10]) {  }
            pin(MASK[11]) {  }
            pin(MASK[12]) {  }
            pin(MASK[13]) {  }
            pin(MASK[14]) {  }
            pin(MASK[15]) {  }
        }
        bus(WDATA){
            bus_type: bus16;
            direction: input;
            pin(WDATA[0]) {  }
            pin(WDATA[1]) {  }
            pin(WDATA[2]) {  }
            pin(WDATA[3]) {  }
            pin(WDATA[4]) {  }
            pin(WDATA[5]) {  }
            pin(WDATA[6]) {  }
            pin(WDATA[7]) {  }
            pin(WDATA[8]) {  }
            pin(WDATA[9]) {  }
            pin(WDATA[10]) {  }
            pin(WDATA[11]) {  }
            pin(WDATA[12]) {  }
            pin(WDATA[13]) {  }
            pin(WDATA[14]) {  }
            pin(WDATA[15]) {  }
        }
        bus(RDATA){
            bus_type: bus16;
            direction: output;
            pin(RDATA[0]) {  }
            pin(RDATA[1]) {  }
            pin(RDATA[2]) {  }
            pin(RDATA[3]) {  }
            pin(RDATA[4]) {  }
            pin(RDATA[5]) {  }
            pin(RDATA[6]) {  }
            pin(RDATA[7]) {  }
            pin(RDATA[8]) {  }
            pin(RDATA[9]) {  }
            pin(RDATA[10]) {  }
            pin(RDATA[11]) {  }
            pin(RDATA[12]) {  }
            pin(RDATA[13]) {  }
            pin(RDATA[14]) {  }
            pin(RDATA[15]) {  }
        }
    }

    cell(SB_IO) {
        pin(PACKAGE_PIN) { direction: inout; }
        pin(LATCH_INPUT_VALUE) { direction: input; }
        pin(CLOCK_ENABLE) { direction: input; }
        pin(INPUT_CLK) { direction: input; }
        pin(OUTPUT_CLK) { direction: input; }
        pin(OUTPUT_ENABLE) { direction: input; }
        pin(D_OUT_0) { direction: input; }
        pin(D_OUT_1) { direction: input; }
        pin(D_IN_0) { direction: output; }
        pin(D_IN_1) { direction: output; }
    }

    cell(SB_GB_IO) {
        pin(PACKAGE_PIN) { direction: inout; }
        pin(LATCH_INPUT_VALUE) { direction: input; }
        pin(CLOCK_ENABLE) { direction: input; }
        pin(INPUT_CLK) { direction: input; }
        pin(OUTPUT_CLK) { direction: input; }
        pin(OUTPUT_ENABLE) { direction: input; }
        pin(D_OUT_0) { direction: input; }
        pin(D_OUT_1) { direction: input; }
        pin(D_IN_0) { direction: output; }
        pin(D_IN_1) { direction: output; }
        pin(GLOBAL_BUFFER_OUTPUT) { direction: output; }
    }

    cell(SB_GB) {
        pin(USER_SIGNAL_TO_GLOBAL_BUFFER) { direction: input; }
        pin(GLOBAL_BUFFER_OUTPUT) { direction: output; }
    }

    cell(SB_HFOSC) {
        pin(CLKHFEN) { direction: input; }
        pin(CLKHFPU) { direction: input; }
        pin(CLKHF) { direction: output; }
    }

    cell(SB_LFOSC) {
        pin(CLKLFEN) { direction: input; }
        pin(CLKLFPU) { direction: input; }
        pin(CLKLF) { direction: output; }
    }

    cell(SB_MAC16) {
        pin(CLK) { direction: input; }
        pin(CE) { direction: input; }
        pin(IRSTTOP) { direction: input; }
        pin(IRSTBOT) { direction: input; }
        pin(ORSTTOP) { direction: input; }
        pin(ORSTBOT) { direction: input; }
        pin(AHOLD) { direction: input; }
        pin(BHOLD) { direction: input; }
        pin(CHOLD) { direction: input; }
        pin(DHOLD) { direction: input; }
        pin(OHOLDTOP) { direction: input; }
        pin(OHOLDBOT) { direction: input; }
        pin(OLOADTOP) { direction: input; }
        pin(OLOADBOT) { direction: input; }
        pin(ADDSUBTOP) { direction: input; }
        pin(ADDSUBBOT) { direction: input; }
        pin(CO) { direction: input; }
        pin(CI) { direction: input; }
        pin(ACCUMCI) { direction: input; }
        pin(ACCUMCO) { direction: input; }
        pin(SIGNEXTIN) { direction: input; }
        pin(SIGNEXTOUT) { direction: input; }
        bus(A) {
            bus_type: bus16;
            direction: input;
            pin(A[0]) {  }
            pin(A[1]) {  }
            pin(A[2]) {  }
            pin(A[3]) {  }
            pin(A[4]) {  }
            pin(A[5]) {  }
            pin(A[6]) {  }
            pin(A[7]) {  }
            pin(A[8]) {  }
            pin(A[9]) {  }
            pin(A[10]) {  }
            pin(A[11]) {  }
            pin(A[12]) {  }
            pin(A[13]) {  }
            pin(A[14]) {  }
            pin(A[15]) {  }
        }
        bus(B) {
            bus_type: bus16;
            direction: input;
            pin(B[0]) {  }
            pin(B[1]) {  }
            pin(B[2]) {  }
            pin(B[3]) {  }
            pin(B[4]) {  }
            pin(B[5]) {  }
            pin(B[6]) {  }
            pin(B[7]) {  }
            pin(B[8]) {  }
            pin(B[9]) {  }
            pin(B[10]) {  }
            pin(B[11]) {  }
            pin(B[12]) {  }
            pin(B[13]) {  }
            pin(B[14]) {  }
            pin(B[15]) {  }
        }
        bus(C) {
            bus_type: bus16;
            direction: input;
            pin(C[0]) {  }
            pin(C[1]) {  }
            pin(C[2]) {  }
            pin(C[3]) {  }
            pin(C[4]) {  }
            pin(C[5]) {  }
            pin(C[6]) {  }
            pin(C[7]) {  }
            pin(C[8]) {  }
            pin(C[9]) {  }
            pin(C[10]) {  }
            pin(C[11]) {  }
            pin(C[12]) {  }
            pin(C[13]) {  }
            pin(C[14]) {  }
            pin(C[15]) {  }
        }
        bus(D) {
            bus_type: bus16;
            direction: input;
            pin(D[0]) {  }
            pin(D[1]) {  }
            pin(D[2]) {  }
            pin(D[3]) {  }
            pin(D[4]) {  }
            pin(D[5]) {  }
            pin(D[6]) {  }
            pin(D[7]) {  }
            pin(D[8]) {  }
            pin(D[9]) {  }
            pin(D[10]) {  }
            pin(D[11]) {  }
            pin(D[12]) {  }
            pin(D[13]) {  }
            pin(D[14]) {  }
            pin(D[15]) {  }
        }
        bus(O) {
            bus_type: bus32;
            direction: output;
            pin(O[0]) {  }
            pin(O[1]) {  }
            pin(O[2]) {  }
            pin(O[3]) {  }
            pin(O[4]) {  }
            pin(O[5]) {  }
            pin(O[6]) {  }
            pin(O[7]) {  }
            pin(O[8]) {  }
            pin(O[9]) {  }
            pin(O[10]) {  }
            pin(O[11]) {  }
            pin(O[12]) {  }
            pin(O[13]) {  }
            pin(O[14]) {  }
            pin(O[15]) {  }
            pin(O[16]) {  }
            pin(O[17]) {  }
            pin(O[18]) {  }
            pin(O[19]) {  }
            pin(O[20]) {  }
            pin(O[21]) {  }
            pin(O[22]) {  }
            pin(O[23]) {  }
            pin(O[24]) {  }
            pin(O[25]) {  }
            pin(O[26]) {  }
            pin(O[27]) {  }
            pin(O[28]) {  }
            pin(O[29]) {  }
            pin(O[30]) {  }
            pin(O[31]) {  }
        }
    }

    cell(SB_I2C) {
        pin(SBCLKI) { direction: input; }
        pin(SBRWI) { direction: input; }
        pin(SBSTBI) { direction: input; }
        pin(SBADRI0) { direction: input; }
        pin(SBADRI1) { direction: input; }
        pin(SBADRI2) { direction: input; }
        pin(SBADRI3) { direction: input; }
        pin(SBADRI4) { direction: input; }
        pin(SBADRI5) { direction: input; }
        pin(SBADRI6) { direction: input; }
        pin(SBADRI7) { direction: input; }
        pin(SBDATI0) { direction: input; }
        pin(SBDATI1) { direction: input; }
        pin(SBDATI2) { direction: input; }
        pin(SBDATI3) { direction: input; }
        pin(SBDATI4) { direction: input; }
        pin(SBDATI5) { direction: input; }
        pin(SBDATI6) { direction: input; }
        pin(SBDATI7) { direction: input; }
        pin(SBDATO0) { direction: output; }
        pin(SBDATO1) { direction: output; }
        pin(SBDATO2) { direction: output; }
        pin(SBDATO3) { direction: output; }
        pin(SBDATO4) { direction: output; }
        pin(SBDATO5) { direction: output; }
        pin(SBDATO6) { direction: output; }
        pin(SBDATO7) { direction: output; }
        pin(SBACKO) { direction: output; }
        pin(I2CIRQ) { direction: output; }
        pin(I2CWKUP) { direction: output; }
        pin(SCLI) { direction: input; }
        pin(SCLO) { direction: output; }
        pin(SCLOE) { direction: output; }
        pin(SDAI) { direction: input; }
        pin(SDAO) { direction: output; }
        pin(SDAOE) { direction: output; }
    }

    cell(SB_SPI) {
        pin(SBCLKI) { direction: input; }
        pin(SBRWI) { direction: input; }
        pin(SBSTBI) { direction: input; }
        pin(SBADRI0) { direction: input; }
        pin(SBADRI1) { direction: input; }
        pin(SBADRI2) { direction: input; }
        pin(SBADRI3) { direction: input; }
        pin(SBADRI4) { direction: input; }
        pin(SBADRI5) { direction: input; }
        pin(SBADRI6) { direction: input; }
        pin(SBADRI7) { direction: input; }
        pin(SBDATI0) { direction: input; }
        pin(SBDATI1) { direction: input; }
        pin(SBDATI2) { direction: input; }
        pin(SBDATI3) { direction: input; }
        pin(SBDATI4) { direction: input; }
        pin(SBDATI5) { direction: input; }
        pin(SBDATI6) { direction: input; }
        pin(SBDATI7) { direction: input; }
        pin(SBDATO0) { direction: output; }
        pin(SBDATO1) { direction: output; }
        pin(SBDATO2) { direction: output; }
        pin(SBDATO3) { direction: output; }
        pin(SBDATO4) { direction: output; }
        pin(SBDATO5) { direction: output; }
        pin(SBDATO6) { direction: output; }
        pin(SBDATO7) { direction: output; }
        pin(SBACKO) { direction: output; }
        pin(SPIIRQ) { direction: output; }
        pin(SPIWKUP) { direction: output; }
        pin(MI) { direction: input; }
        pin(SO) { direction: output; }
        pin(SOE) { direction: output; }
        pin(SI) { direction: input; }
        pin(MO) { direction: output; }
        pin(MOE) { direction: output; }
        pin(SCKI) { direction: input; }
        pin(SCKO) { direction: output; }
        pin(SCKOE) { direction: output; }
        pin(SCSNI) { direction: input; }
        pin(MCSNO0) { direction: input; }
        pin(MCSNO1) { direction: input; }
        pin(MCSNO2) { direction: input; }
        pin(MCSNO3) { direction: input; }
        pin(MCSNOE0) { direction: input; }
        pin(MCSNOE1) { direction: input; }
        pin(MCSNOE2) { direction: input; }
        pin(MCSNOE3) { direction: input; }
    }
}
